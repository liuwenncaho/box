#hibernate配置属性
#----------------------------------------------------------------------------------------------------

hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
hibernate.show_sql=true
hibernate.format_sql=true

#在生成的 SQL 中,将给定的 schema/ tablespace 附加于非全限定名的表名上。例如:SCHEMA_NAME
#hibernate.default_schema

#在生成的 SQL 中,将给定的 catalog 附加于 非全限定名的表名上。例如:CATALOG_NAME
#hibernate.default_catalog

#org.hibernate.SessionFactory 创建后,将自动 使用这个名字绑定到 JNDI 中。例如:jndi/composite/name
#hibernate.session_factory_name=

#集联抓取的最大深度,0表示关闭
hibernate.max_fetch_depth=2

#为Hibernate 关联的批量抓取设置默认数量.例如:建议的取值为 4,8,和 16
hibernate.default_batch_fetch_size=8

#为由这个 SessionFactory 打开的所有 Session 指定默认的实体表现模式。取值dynamic-map,dom4j,pojo
#hibernate.default_entity_mode=pojo

#强制 Hibernate 按照被更新数据的主键,为 SQL 更新排序。这么做将减少在高并发系统中 事务的死锁。例如:true | false
#hibernate.order_updates=true

#如果开启,Hibernate 将收集有助于性能调节 的统计数据。例如:true | false
#hibernate.generate_statistics=true

#如果开启,在对象被删除时生成的标识属性将被重设为默认值。例如:true | false
#hibernate.use_identifier_rollback=true

#如果开启,Hibernate 将在 SQL 中生成有助于 调试的注释信息,默认值为 false。例如:true | false
#hibernate.use_sql_comments=true

#Setting is relevant when using @GeneratedValue. It indicates whether or not the new IdentifierGenerator implementations are used for javax.persistence.GenerationType.AUTO, javax.persistence.GenerationType.TABLE and javax.persistence.GenerationType.SEQUENCE. Default to false to keep backward compatibility.例如:true | false
#hibernate.id.new_generator_mappings=true

#----------------------------------------------------------------------------------------------------
#hibernate JDBC和连接属性
#----------------------------------------------------------------------------------------------------

#非零值,指定 JDBC 抓取数量的大小(调用 Statement.setFetchSize())。
hibernate.jdbc.fetch_size=25

#非零值,允许 Hibernate 使用 JDBC2 的批量 更新。例如:建议取 5 到 30 之间的值
hibernate.jdbc.batch_size=30

#Set this property to true if your JDBC driver returns correct row counts from executeBatch(). It is usually safe to turn this option on. Hibernate will then use batched DML for automatically versioned data. Defaults to false.例如:true | false
#hibernate.jdbc.batch_versioned_data

#选择一个自定义的 Batcher。多数应用程序不 需要这个配置属性。例如:classname.of.Batcher
#hibernate.jdbc.factory_class

#允许 Hibernate 使用 JDBC2 的可滚动结果集。 只有在使用用户提供的 JDBC 连接时,这个选 项才是必要的,否则 Hibernate 会使用连接的 元数据。例如:true | false
#hibernate.jdbc.use_scrollable_resultset

#在 JDBC 读写 binary 或 serializable 的类型 时使用流(stream)(系统级属性)。例如:true | false
#hibernate.jdbc.use_streams_for_binary

#在数据插入数据库之后,允许使用 JDBC3 PreparedStatement.getGeneratedKeys() 来获取 数据库生成的 key(键)。需要 JDBC3+ 驱 动和 JRE1.4+,如果你的数据库驱动在使用Hibernate 的标识生成器时遇到问题,请将此 值设为 false。默认情况下将使用连接的元数 据来判定驱动的能力。例如:true | false
#hibernate.jdbc.use_get_generated_keys

#自定义 ConnectionProvider 的类名,此类用来 向 Hibernate 提供 JDBC 连接。例如:classname.of.ConnectionProvider
#hibernate.connection.provider_class

#置 JDBC 事务隔离级别。查看 java.sql.Connection 来了解各个值的具体意 义,但请注意多数数据库都不支持所有的隔离 级别。例如:1, 2, 4, 8
#hibernate.connection.isolation

#允许被缓存的 JDBC 连接开启自动提交 (autocommit)(不推荐)。例如:true | false
#hibernate.connection.autocommit=false

#指定 Hibernate 在何时释放 JDBC 连 接。默认情况下,直到 Session 被显式关闭 或被断开连接时,才会释放 JDBC 连接。对于 应用程序服务器的 JTA 数据源,你应当使用 after_statement,这样在每次 JDBC 调用后, 都会主动的释放连接。对于非 JTA 的连接,使 用 after_transaction 在每个事务结束时释放连 接是合理的。auto 将为 JTA 和 CMT 事务策 略选择 after_statement,为JDBC事务策略选择 after_transaction。例如:auto (默认) | on_close | after_transaction | after_statement
#hibernate.connection.release_mode

#把 JDBC 属性 <propertyName> 传递给 DriverManager.getConnection()。
#hibernate.connection.<propertyName>

#把 <propertyName> 属性传递给 JNDI InitialContextFactory。
#hibernate.jndi.<propertyName>

#----------------------------------------------------------------------------------------------------
#Hibernate 缓存属性
#----------------------------------------------------------------------------------------------------
#自定义的 CacheProvider 的类名。例如:classname.of.CacheProvider
#hibernate.cache.provider_class
#hibernate.cache.region.factory_class=net.sf.ehcache.hibernate.SingletonEhCacheRegionFactory
hibernate.cache.region.factory_class=org.hibernate.cache.impl.NoCachingRegionFactory

#以频繁的读操作为代价,优化二级缓存来最小 化写操作。在 Hibernate3 中,这个设置对的 集群缓存非常有用,对集群缓存的实现而言, 默认是开启的。例如:true | false
#hibernate.cache.use_minimal_puts

#允许查询缓存,个别查询仍然需要被设置为可缓存的。例如:true | false
hibernate.cache.use_query_cache=false

#能用来完全禁止使用二级缓存。对那些在类的 映射定义中指定 <cache> 的类,会默认开启二 级缓存。例如:true | false
#hibernate.cache.use_second_level_cache

#自定义实现 QueryCache 接口的类名,默认为内 建的 StandardQueryCache。例如:classname.of.QueryCache
#hibernate.cache.query_cache_factory

#二级缓存区域名的前缀。例如:prefix
#hibernate.cache.region_prefix

#强制 Hibernate 以更人性化的格式将数据存入 二级缓存。例如:true | false
#hibernate.cache.use_structured_entries

#Setting used to give the name of the default org.hibernate.annotations.CacheConcurrencyStrategy to use when either @Cacheable or @Cache is used. @Cache(strategy="..") is used to override this default.
#hibernate.cache.default_cache_concurrency_strategy

#----------------------------------------------------------------------------------------------------
#Hibernate 事务属性
#----------------------------------------------------------------------------------------------------

#一个 TransactionFactory 的类名,用 于 Hibernate Transaction API(默认为 JDBCTransactionFactory)。例如:classname.of.TransactionFactory
#hibernate.transaction.factory_class

#一个 JNDI 名字,被 JTATransactionFactory 用 来从应用服务器获取 JTA UserTransaction。例如:jndi/composite/name
#jta.UserTransaction

#一个 TransactionManagerLookup 的类名 — 当使 用 JVM 级缓存,或在 JTA 环境中使用 hilo 生 成器的时候需要该类。例如:classname.of.TransactionManagerLookup
#hibernate.transaction.manager_lookup_class

#If enabled, the session will be automatically flushed during the before completion phase of the transaction. Built-in and automatic session context management is preferred, see 第 2.3 节 “上 下文相关的会话(Contextual Session)”.例如:true | false
#hibernate.transaction.flush_before_completion

#If enabled, the session will be automatically closed during the after completion phase of the transaction. Built-in and automatic session context management is preferred, see 第 2.3 节 “上 下文相关的会话(Contextual Session)”.例如:true | false
#hibernate.transaction.auto_close_session

#----------------------------------------------------------------------------------------------------
#其他属性
#----------------------------------------------------------------------------------------------------

#Supply a custom strategy for the scoping of the "current" Session. See 第 2.3 节 “上下 文相关的会话(Contextual Session)” for more information about the built-in strategies.例如:jta | thread | managed | custom.Class
#hibernate.current_session_context_class

#选择 HQL 解析器的实现。例 如:org.hibernate.hql.ast.ASTQueryTranslatorFactory或 org.hibernate.hql.classic.ClassicQueryTranslatorFactory
#hibernate.query.factory_class

#将 Hibernate 查询中的符号映射到 SQL 查询 中的符号(符号可能是函数名或常量名字)。例如:hqlLiteral=SQL_LITERAL, hqlFunction=SQLFUNC
#hibernate.query.substitutions

#在 SessionFactory 创建时,自动检查数据库 结构,或者将数据库 schema 的 DDL 导出 到数据库。使用 create-drop 时,在显式关闭 SessionFactory 时,将删除掉数据库 schema。例如:validate | update | create | create- drop
hibernate.hbm2ddl.auto=update

#Comma-separated names of the optional files containing SQL DML statements executed during the SessionFactory creation. This is useful for testing or demoing: by adding INSERT statements for example you can populate your database with a minimal set of data when it is deployed.File order matters, the statements of a give file are executed before the statements of the following files. These statements are only executed if the schema is created ie if hibernate.hbm2ddl.auto is set to create or create-drop.e.g. /humans.sql,/dogs.sql
#hibernate.hbm2ddl.import_files

#Enables the use of bytecode manipulation instead of runtime reflection. This is a System-level property and cannot be set in hibernate.cfg.xml. Reflection can sometimes be useful when troubleshooting. Hibernate always requires either CGLIB or javassist even if you turn off the optimizer.例如:true | false
#hibernate.bytecode.use_reflection_optimizer

#Both javassist or cglib can be used as byte manipulation engines; the default is javassist.e.g. javassist | cglib
#hibernate.bytecode.provider

#----------------------------------------------------------------------------------------------------
#c3p0 connection pool
#----------------------------------------------------------------------------------------------------
hibernate.c3p0.min_size=5
hibernate.c3p0.max_size=20
hibernate.c3p0.timeout=1800
hibernate.c3p0.max_statements=50
#----------------------------------------------------------------------------------------------------


hibernate.autoReconnect=true

#net.sf.ehcache.configurationResourceName=/ehcache.xml

hibernate.validator.autoregister_listeners=false
hibernate.validator.apply_to_ddl=false
#javax.persistence.validation.mode=none

